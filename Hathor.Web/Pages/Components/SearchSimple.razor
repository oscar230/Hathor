<HxSearchBox DataProvider="ProvideSearchResults"
             ItemTitleSelector="i => i.Title"
             ItemSubtitleSelector="i => i.Subtitle"
             ItemIconSelector="i => i.Icon"
             TItem="SearchBoxItem"
             Placeholder="Search"
             OnItemSelected="OnItemSelected"
             AllowTextQuery="true"
             @bind-TextQuery="textQuery"
             OnTextQueryTriggered="OnTextQueryTriggered">
    <DefaultContentTemplate>
        <div class="p-2 text-muted">Search for Mouse, Table or Door...</div>
    </DefaultContentTemplate>
    <NotFoundTemplate>
        <div class="small py-2 px-3 text-muted"><HxIcon CssClass="me-2" Icon="BootstrapIcon.EmojiFrown"/>Sorry, I did not find that...</div>
    </NotFoundTemplate>
</HxSearchBox>

<p class="mt-3">
    Triggered text-query: @triggeredTextQuery<br />
    Bound text-query: @textQuery<br />
</p>

@code {
    private SearchBoxItem selectedItem;
    private string triggeredTextQuery;
    private string textQuery;

    List<SearchBoxItem> Data { get; set; } = new()
        {
            new() { Title = "Table", Subtitle = "50 000", Icon = BootstrapIcon.Table },
            new() { Title = "Mouse", Subtitle = "400", Icon = BootstrapIcon.Mouse },
            new() { Title = "Door", Subtitle = "1000", Icon = BootstrapIcon.DoorClosed }
        };

    private void OnItemSelected(SearchBoxItem item)
    {
        selectedItem = item;
    }

    private void OnTextQueryTriggered(string text)
    {
        triggeredTextQuery = text;
    }

    private async Task<SearchBoxDataProviderResult<SearchBoxItem>> ProvideSearchResults(SearchBoxDataProviderRequest request)
    {
        await Task.Delay(400); // imitate slower server API

        return new()
            {
                Data = Data.Where(i => i.Title.Contains(request.UserInput, StringComparison.OrdinalIgnoreCase))
            };
    }

    class SearchBoxItem
    {
        public string Title { get; set; }
        public string Subtitle { get; set; }
        public BootstrapIcon Icon { get; set; }
    }
}
