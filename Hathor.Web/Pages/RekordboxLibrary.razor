@page "/Library"
@using Hathor.Web.Models.Rekordbox;
@using Hathor.Web.Services
@inject IHxMessengerService MessengerService
@inject RekordboxService RekordboxService

<PageTitle>Rekorbox</PageTitle>
<div class="container">
    <div class="row">
        <HxTabPanel @ref="hxTabPanel" InitialActiveTabId="uploadTab">
            <HxTab Id="uploadTab" Order="1" Title="Upload library">
                <Content>
                    <h1>Upload a Rekorbox export</h1>
                    <p>Upload a Rekordbox export as an xml-file. To aquire this file; In rekordbox choose <i>File > Export Collection in XML format</i>.</p>
                    <HxInputFileDropZone @ref="hxInputFileDropZone" UploadUrl="/RekordboxLibrary/" OnFileUploaded="FileUploaded" OnChange="FileInputChanged" Accept=".xml" Multiple />
                </Content>
            </HxTab>
            <HxTab Id="viewTab" Order="2" Title="View libraries">
                <Content>
                    <HxGrid @ref="hxGrid" TItem="Library" DataProvider="GetGridData" Responsive="true" PageSize="25">
                        <Columns>
                            <HxGridColumn ItemTextSelector="@(item => item.UploadDateTimeOffset.ToString())" SortKeySelector="@(item => item.UploadDateTimeOffset)" SortDirection="Havit.Collections.SortDirection.Descending" HeaderText="Upload date and time" />
                            <HxGridColumn ItemTextSelector="@(item => item.Collection.Entries)" SortKeySelector="@(item => item.Collection.Entries)" HeaderText="Number of tracks" />
                        </Columns>
                    </HxGrid>
                </Content>
            </HxTab>
        </HxTabPanel>
    </div>
</div>

@code
{
    private HxGrid<Library>? hxGrid = null;
    private HxTabPanel? hxTabPanel = null;
    private HxInputFileDropZone? hxInputFileDropZone;

    //protected override void OnInitialized()
    //{
    //}

    //public override async Task SetParametersAsync(ParameterView parameters)
    //{
        
    //}

    private void FileUploaded(FileUploadedEventArgs fileUploaded)
    {
        MessengerService.AddInformation($"{fileUploaded.OriginalFileName} uploaded.", fileUploaded.ResponseText);
    }

    private async void FileInputChanged(InputFileChangeEventArgs inputFileChange)
    {
        const string? accessToken = null;
        MessengerService.AddInformation("Change", inputFileChange.FileCount.ToString());
        if (hxInputFileDropZone is not null)
        {
            UploadCompletedEventArgs uploadCompletedEventArgs = await hxInputFileDropZone.UploadAsync(accessToken);
        }
    }

    private Task<GridDataProviderResult<Library>> GetGridData(GridDataProviderRequest<Library> request)
    {
        var libraries = RekordboxService.GetAll(50);
        return Task.FromResult<GridDataProviderResult<Library>>(new()
        {
            Data = libraries,
            TotalCount = libraries.Count()
        });
    }
}
